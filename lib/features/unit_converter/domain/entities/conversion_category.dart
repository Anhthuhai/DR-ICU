import 'conversion_unit.dart';

class ConversionCategory {
  final String id;
  final String name;
  final String description;
  final List<ConversionUnit> units;
  final String icon; // Icon name for UI
  final String commonExample; // Example: "mg/dL ‚Üî mmol/L"
  final String? normalRange; // Gi√° tr·ªã tham kh·∫£o b√¨nh th∆∞·ªùng (optional)
  final String? clinicalSignificance; // √ù nghƒ©a l√¢m s√†ng (optional)

  const ConversionCategory({
    required this.id,
    required this.name,
    required this.description,
    required this.units,
    required this.icon,
    required this.commonExample,
    this.normalRange,
    this.clinicalSignificance,
  });

  /// Get the base unit for this category
  ConversionUnit get baseUnit => 
      units.firstWhere((unit) => unit.isBaseUnit, orElse: () => units.first);

  /// Get a unit by ID
  ConversionUnit? getUnitById(String id) {
    try {
      return units.firstWhere((unit) => unit.id == id);
    } catch (e) {
      return null;
    }
  }

  /// Analyze the meaning of a test result value
  String analyzeResult(double value, String unitSymbol) {
    switch (id) {
      case 'glucose':
        return _analyzeGlucose(value, unitSymbol);
      case 'cholesterol':
        return _analyzeCholesterol(value, unitSymbol);
      case 'creatinine':
        return _analyzeCreatinine(value, unitSymbol);
      case 'hba1c':
        return _analyzeHbA1c(value, unitSymbol);
      case 'triglycerides':
        return _analyzeTriglycerides(value, unitSymbol);
      case 'urea':
        return _analyzeUrea(value, unitSymbol);
      case 'hdl_cholesterol':
        return _analyzeHDL(value, unitSymbol);
      case 'ldl_cholesterol':
        return _analyzeLDL(value, unitSymbol);
      case 'uric_acid':
        return _analyzeUricAcid(value, unitSymbol);
      case 'calcium':
        return _analyzeCalcium(value, unitSymbol);
      case 'magnesium':
        return _analyzeMagnesium(value, unitSymbol);
      case 'phosphate':
        return _analyzePhosphate(value, unitSymbol);
      case 'bilirubin_total':
        return _analyzeBilirubin(value, unitSymbol);
      case 'albumin':
        return _analyzeAlbumin(value, unitSymbol);
      case 'total_protein':
        return _analyzeTotalProtein(value, unitSymbol);
      case 'sgot_ast':
        return _analyzeAST(value, unitSymbol);
      case 'sgpt_alt':
        return _analyzeALT(value, unitSymbol);
      case 'alp':
        return _analyzeALP(value, unitSymbol);
      case 'ggt':
        return _analyzeGGT(value, unitSymbol);
      default:
        return 'Kh√¥ng c√≥ th√¥ng tin ph√¢n t√≠ch cho lo·∫°i x√©t nghi·ªám n√†y';
    }
  }

  String _analyzeGlucose(double value, String unitSymbol) {
    if (unitSymbol == 'mg/dL') {
      if (value < 70) return 'üî¥ TH·∫§P: H·∫° ƒë∆∞·ªùng huy·∫øt - C·∫ßn b·ªï sung glucose ngay';
      if (value <= 99) return 'üü¢ B√åNH TH∆Ø·ªúNG: Glucose l√∫c ƒë√≥i trong gi·ªõi h·∫°n b√¨nh th∆∞·ªùng';
      if (value <= 125) return 'üü° TI·ªÄN TI·ªÇU ƒê∆Ø·ªúNG: Glucose l√∫c ƒë√≥i b·∫•t th∆∞·ªùng - C·∫ßn theo d√µi';
      return 'üî¥ CAO: Ti·ªÉu ƒë∆∞·ªùng - C·∫ßn ƒëi·ªÅu tr·ªã v√† ki·ªÉm so√°t';
    } else { // mmol/L
      if (value < 3.9) return 'üî¥ TH·∫§P: H·∫° ƒë∆∞·ªùng huy·∫øt - C·∫ßn b·ªï sung glucose ngay';
      if (value <= 5.5) return 'üü¢ B√åNH TH∆Ø·ªúNG: Glucose l√∫c ƒë√≥i trong gi·ªõi h·∫°n b√¨nh th∆∞·ªùng';
      if (value <= 6.9) return 'üü° TI·ªÄN TI·ªÇU ƒê∆Ø·ªúNG: Glucose l√∫c ƒë√≥i b·∫•t th∆∞·ªùng - C·∫ßn theo d√µi';
      return 'üî¥ CAO: Ti·ªÉu ƒë∆∞·ªùng - C·∫ßn ƒëi·ªÅu tr·ªã v√† ki·ªÉm so√°t';
    }
  }

  String _analyzeCholesterol(double value, String unitSymbol) {
    if (unitSymbol == 'mg/dL') {
      if (value < 200) return 'üü¢ T·ªêT: Cholesterol to√†n ph·∫ßn trong gi·ªõi h·∫°n mong mu·ªën';
      if (value <= 239) return 'üü° BI√äN GI·ªöI CAO: C·∫ßn thay ƒë·ªïi l·ªëi s·ªëng v√† theo d√µi';
      return 'üî¥ CAO: TƒÉng nguy c∆° tim m·∫°ch - C·∫ßn ƒëi·ªÅu tr·ªã';
    } else { // mmol/L
      if (value < 5.2) return 'üü¢ T·ªêT: Cholesterol to√†n ph·∫ßn trong gi·ªõi h·∫°n mong mu·ªën';
      if (value <= 6.2) return 'üü° BI√äN GI·ªöI CAO: C·∫ßn thay ƒë·ªïi l·ªëi s·ªëng v√† theo d√µi';
      return 'üî¥ CAO: TƒÉng nguy c∆° tim m·∫°ch - C·∫ßn ƒëi·ªÅu tr·ªã';
    }
  }

  String _analyzeCreatinine(double value, String unitSymbol) {
    if (unitSymbol == 'mg/dL') {
      if (value < 0.6) return 'üü° TH·∫§P: C√≥ th·ªÉ do gi·∫£m kh·ªëi l∆∞·ª£ng c∆° ho·∫∑c ch·∫ø ƒë·ªô ƒÉn √≠t protein';
      if (value <= 1.3) return 'üü¢ B√åNH TH∆Ø·ªúNG: Ch·ª©c nƒÉng th·∫≠n trong gi·ªõi h·∫°n b√¨nh th∆∞·ªùng';
      if (value <= 2.0) return 'üü° TƒÇNG NH·∫∏: Suy gi·∫£m ch·ª©c nƒÉng th·∫≠n nh·∫π - C·∫ßn theo d√µi';
      return 'üî¥ CAO: Suy gi·∫£m ch·ª©c nƒÉng th·∫≠n ƒë√°ng k·ªÉ - C·∫ßn can thi·ªáp';
    } else { // Œºmol/L
      if (value < 53) return 'üü° TH·∫§P: C√≥ th·ªÉ do gi·∫£m kh·ªëi l∆∞·ª£ng c∆° ho·∫∑c ch·∫ø ƒë·ªô ƒÉn √≠t protein';
      if (value <= 115) return 'üü¢ B√åNH TH∆Ø·ªúNG: Ch·ª©c nƒÉng th·∫≠n trong gi·ªõi h·∫°n b√¨nh th∆∞·ªùng';
      if (value <= 177) return 'üü° TƒÇNG NH·∫∏: Suy gi·∫£m ch·ª©c nƒÉng th·∫≠n nh·∫π - C·∫ßn theo d√µi';
      return 'üî¥ CAO: Suy gi·∫£m ch·ª©c nƒÉng th·∫≠n ƒë√°ng k·ªÉ - C·∫ßn can thi·ªáp';
    }
  }

  String _analyzeHbA1c(double value, String unitSymbol) {
    if (unitSymbol == '%') {
      if (value < 5.7) return 'üü¢ B√åNH TH∆Ø·ªúNG: Ki·ªÉm so√°t ƒë∆∞·ªùng huy·∫øt t·ªët';
      if (value <= 6.4) return 'üü° TI·ªÄN TI·ªÇU ƒê∆Ø·ªúNG: Nguy c∆° ph√°t tri·ªÉn ti·ªÉu ƒë∆∞·ªùng - C·∫ßn can thi·ªáp';
      if (value <= 7.0) return 'üü† TI·ªÇU ƒê∆Ø·ªúNG: Ki·ªÉm so√°t ch·∫•p nh·∫≠n ƒë∆∞·ª£c - Ti·∫øp t·ª•c ƒëi·ªÅu tr·ªã';
      if (value <= 9.0) return 'üî¥ TI·ªÇU ƒê∆Ø·ªúNG: Ki·ªÉm so√°t k√©m - C·∫ßn ƒëi·ªÅu ch·ªânh ƒëi·ªÅu tr·ªã';
      return 'üî¥ TI·ªÇU ƒê∆Ø·ªúNG: Ki·ªÉm so√°t r·∫•t k√©m - C·∫ßn can thi·ªáp g·∫•p';
    } else { // mmol/mol
      if (value < 39) return 'üü¢ B√åNH TH∆Ø·ªúNG: Ki·ªÉm so√°t ƒë∆∞·ªùng huy·∫øt t·ªët';
      if (value <= 47) return 'üü° TI·ªÄN TI·ªÇU ƒê∆Ø·ªúNG: Nguy c∆° ph√°t tri·ªÉn ti·ªÉu ƒë∆∞·ªùng - C·∫ßn can thi·ªáp';
      if (value <= 53) return 'üü† TI·ªÇU ƒê∆Ø·ªúNG: Ki·ªÉm so√°t ch·∫•p nh·∫≠n ƒë∆∞·ª£c - Ti·∫øp t·ª•c ƒëi·ªÅu tr·ªã';
      if (value <= 75) return 'üî¥ TI·ªÇU ƒê∆Ø·ªúNG: Ki·ªÉm so√°t k√©m - C·∫ßn ƒëi·ªÅu ch·ªânh ƒëi·ªÅu tr·ªã';
      return 'üî¥ TI·ªÇU ƒê∆Ø·ªúNG: Ki·ªÉm so√°t r·∫•t k√©m - C·∫ßn can thi·ªáp g·∫•p';
    }
  }

  String _analyzeTriglycerides(double value, String unitSymbol) {
    if (unitSymbol == 'mg/dL') {
      if (value < 150) return 'üü¢ B√åNH TH∆Ø·ªúNG: Triglyceride trong gi·ªõi h·∫°n mong mu·ªën';
      if (value <= 199) return 'üü° BI√äN GI·ªöI CAO: C·∫ßn thay ƒë·ªïi l·ªëi s·ªëng';
      if (value <= 499) return 'üî¥ CAO: TƒÉng nguy c∆° tim m·∫°ch - C·∫ßn ƒëi·ªÅu tr·ªã';
      return 'üî¥ R·∫§T CAO: Nguy c∆° vi√™m t·ª•y c·∫•p - C·∫ßn ƒëi·ªÅu tr·ªã kh·∫©n c·∫•p';
    } else { // mmol/L
      if (value < 1.7) return 'üü¢ B√åNH TH∆Ø·ªúNG: Triglyceride trong gi·ªõi h·∫°n mong mu·ªën';
      if (value <= 2.2) return 'üü° BI√äN GI·ªöI CAO: C·∫ßn thay ƒë·ªïi l·ªëi s·ªëng';
      if (value <= 5.6) return 'üî¥ CAO: TƒÉng nguy c∆° tim m·∫°ch - C·∫ßn ƒëi·ªÅu tr·ªã';
      return 'üî¥ R·∫§T CAO: Nguy c∆° vi√™m t·ª•y c·∫•p - C·∫ßn ƒëi·ªÅu tr·ªã kh·∫©n c·∫•p';
    }
  }

  String _analyzeUrea(double value, String unitSymbol) {
    if (unitSymbol == 'mg/dL') {
      if (value < 15) return 'üü° TH·∫§P: C√≥ th·ªÉ do ch·∫ø ƒë·ªô ƒÉn √≠t protein ho·∫∑c b·ªánh gan';
      if (value <= 40) return 'üü¢ B√åNH TH∆Ø·ªúNG: Ch·ª©c nƒÉng th·∫≠n v√† chuy·ªÉn h√≥a protein t·ªët';
      if (value <= 60) return 'üü° TƒÇNG NH·∫∏: C√≥ th·ªÉ do m·∫•t n∆∞·ªõc, ƒÉn nhi·ªÅu protein ho·∫∑c suy th·∫≠n nh·∫π';
      return 'üî¥ CAO: Suy th·∫≠n ƒë√°ng k·ªÉ ho·∫∑c m·∫•t n∆∞·ªõc nghi√™m tr·ªçng - C·∫ßn can thi·ªáp';
    } else { // mmol/L
      if (value < 2.5) return 'üü° TH·∫§P: C√≥ th·ªÉ do ch·∫ø ƒë·ªô ƒÉn √≠t protein ho·∫∑c b·ªánh gan';
      if (value <= 6.7) return 'üü¢ B√åNH TH∆Ø·ªúNG: Ch·ª©c nƒÉng th·∫≠n v√† chuy·ªÉn h√≥a protein t·ªët';
      if (value <= 10.0) return 'üü° TƒÇNG NH·∫∏: C√≥ th·ªÉ do m·∫•t n∆∞·ªõc, ƒÉn nhi·ªÅu protein ho·∫∑c suy th·∫≠n nh·∫π';
      return 'üî¥ CAO: Suy th·∫≠n ƒë√°ng k·ªÉ ho·∫∑c m·∫•t n∆∞·ªõc nghi√™m tr·ªçng - C·∫ßn can thi·ªáp';
    }
  }

  String _analyzeHDL(double value, String unitSymbol) {
    if (unitSymbol == 'mg/dL') {
      if (value < 40) return 'üî¥ TH·∫§P: Nguy c∆° tim m·∫°ch cao - C·∫ßn ƒëi·ªÅu tr·ªã';
      if (value < 50) return 'üü° TH·∫§P (N·ªØ): D∆∞·ªõi m·ª©c khuy·∫øn ngh·ªã cho n·ªØ';
      if (value < 60) return 'üü¢ B√åNH TH∆Ø·ªúNG: HDL-C trong gi·ªõi h·∫°n ch·∫•p nh·∫≠n';
      return 'üü¢ T·ªêT: HDL-C cao c√≥ t√°c d·ª•ng b·∫£o v·ªá tim m·∫°ch';
    } else { // mmol/L
      if (value < 1.0) return 'üî¥ TH·∫§P: Nguy c∆° tim m·∫°ch cao - C·∫ßn ƒëi·ªÅu tr·ªã';
      if (value < 1.3) return 'üü° TH·∫§P (N·ªØ): D∆∞·ªõi m·ª©c khuy·∫øn ngh·ªã cho n·ªØ';
      if (value < 1.6) return 'üü¢ B√åNH TH∆Ø·ªúNG: HDL-C trong gi·ªõi h·∫°n ch·∫•p nh·∫≠n';
      return 'üü¢ T·ªêT: HDL-C cao c√≥ t√°c d·ª•ng b·∫£o v·ªá tim m·∫°ch';
    }
  }

  String _analyzeLDL(double value, String unitSymbol) {
    if (unitSymbol == 'mg/dL') {
      if (value < 100) return 'üü¢ T·ªêT: LDL-C t·ªëi ∆∞u cho h·∫ßu h·∫øt m·ªçi ng∆∞·ªùi';
      if (value < 130) return 'üü° G·∫¶N T·ªêI ∆ØU: Ch·∫•p nh·∫≠n ƒë∆∞·ª£c n·∫øu kh√¥ng c√≥ y·∫øu t·ªë nguy c∆°';
      if (value < 160) return 'üü† BI√äN GI·ªöI CAO: C·∫ßn thay ƒë·ªïi l·ªëi s·ªëng';
      if (value < 190) return 'üî¥ CAO: C·∫ßn ƒëi·ªÅu tr·ªã - Nguy c∆° tim m·∫°ch tƒÉng';
      return 'üî¥ R·∫§T CAO: C·∫ßn ƒëi·ªÅu tr·ªã t√≠ch c·ª±c - Nguy c∆° r·∫•t cao';
    } else { // mmol/L
      if (value < 2.6) return 'üü¢ T·ªêT: LDL-C t·ªëi ∆∞u cho h·∫ßu h·∫øt m·ªçi ng∆∞·ªùi';
      if (value < 3.4) return 'üü° G·∫¶N T·ªêI ∆ØU: Ch·∫•p nh·∫≠n ƒë∆∞·ª£c n·∫øu kh√¥ng c√≥ y·∫øu t·ªë nguy c∆°';
      if (value < 4.1) return 'üü† BI√äN GI·ªöI CAO: C·∫ßn thay ƒë·ªïi l·ªëi s·ªëng';
      if (value < 4.9) return 'üî¥ CAO: C·∫ßn ƒëi·ªÅu tr·ªã - Nguy c∆° tim m·∫°ch tƒÉng';
      return 'üî¥ R·∫§T CAO: C·∫ßn ƒëi·ªÅu tr·ªã t√≠ch c·ª±c - Nguy c∆° r·∫•t cao';
    }
  }

  String _analyzeUricAcid(double value, String unitSymbol) {
    if (unitSymbol == 'mg/dL') {
      if (value < 2.6) return 'üü° TH·∫§P: Hi·∫øm g·∫∑p, c√≥ th·ªÉ do thu·ªëc ho·∫∑c b·ªánh l√Ω';
      if (value <= 6.0) return 'üü¢ B√åNH TH∆Ø·ªúNG (N·ªØ): Trong gi·ªõi h·∫°n b√¨nh th∆∞·ªùng';
      if (value <= 7.2) return 'üü¢ B√åNH TH∆Ø·ªúNG (Nam): Trong gi·ªõi h·∫°n b√¨nh th∆∞·ªùng';
      if (value <= 9.0) return 'üü† CAO: Nguy c∆° gout - C·∫ßn theo d√µi v√† ƒëi·ªÅu ch·ªânh';
      return 'üî¥ R·∫§T CAO: Nguy c∆° gout v√† s·ªèi th·∫≠n cao - C·∫ßn ƒëi·ªÅu tr·ªã';
    } else { // Œºmol/L
      if (value < 155) return 'üü° TH·∫§P: Hi·∫øm g·∫∑p, c√≥ th·ªÉ do thu·ªëc ho·∫∑c b·ªánh l√Ω';
      if (value <= 357) return 'üü¢ B√åNH TH∆Ø·ªúNG (N·ªØ): Trong gi·ªõi h·∫°n b√¨nh th∆∞·ªùng';
      if (value <= 428) return 'üü¢ B√åNH TH∆Ø·ªúNG (Nam): Trong gi·ªõi h·∫°n b√¨nh th∆∞·ªùng';
      if (value <= 535) return 'üü† CAO: Nguy c∆° gout - C·∫ßn theo d√µi v√† ƒëi·ªÅu ch·ªânh';
      return 'üî¥ R·∫§T CAO: Nguy c∆° gout v√† s·ªèi th·∫≠n cao - C·∫ßn ƒëi·ªÅu tr·ªã';
    }
  }

  String _analyzeCalcium(double value, String unitSymbol) {
    if (unitSymbol == 'mg/dL') {
      if (value < 8.8) return 'üî¥ TH·∫§P: H·∫° canxi m√°u - Nguy c∆° tetany, co gi·∫≠t';
      if (value <= 10.6) return 'üü¢ B√åNH TH∆Ø·ªúNG: Canxi trong gi·ªõi h·∫°n b√¨nh th∆∞·ªùng';
      if (value <= 11.5) return 'üü° TƒÇNG NH·∫∏: C·∫ßn ki·ªÉm tra parathyroid v√† vitamin D';
      return 'üî¥ CAO: TƒÉng canxi m√°u - Nguy c∆° s·ªèi th·∫≠n, r·ªëi lo·∫°n tim';
    } else { // mmol/L
      if (value < 2.20) return 'üî¥ TH·∫§P: H·∫° canxi m√°u - Nguy c∆° tetany, co gi·∫≠t';
      if (value <= 2.65) return 'üü¢ B√åNH TH∆Ø·ªúNG: Canxi trong gi·ªõi h·∫°n b√¨nh th∆∞·ªùng';
      if (value <= 2.87) return 'üü° TƒÇNG NH·∫∏: C·∫ßn ki·ªÉm tra parathyroid v√† vitamin D';
      return 'üî¥ CAO: TƒÉng canxi m√°u - Nguy c∆° s·ªèi th·∫≠n, r·ªëi lo·∫°n tim';
    }
  }

  String _analyzeMagnesium(double value, String unitSymbol) {
    if (unitSymbol == 'mg/dL') {
      if (value < 1.7) return 'üî¥ TH·∫§P: H·∫° magie - Nguy c∆° co gi·∫≠t, r·ªëi lo·∫°n nh·ªãp tim';
      if (value <= 2.5) return 'üü¢ B√åNH TH∆Ø·ªúNG: Magie trong gi·ªõi h·∫°n b√¨nh th∆∞·ªùng';
      if (value <= 3.0) return 'üü° TƒÇNG NH·∫∏: C·∫ßn theo d√µi ch·ª©c nƒÉng th·∫≠n';
      return 'üî¥ CAO: TƒÉng magie - C√≥ th·ªÉ do suy th·∫≠n ho·∫∑c d√πng thu·ªëc';
    } else { // mmol/L
      if (value < 0.70) return 'üî¥ TH·∫§P: H·∫° magie - Nguy c∆° co gi·∫≠t, r·ªëi lo·∫°n nh·ªãp tim';
      if (value <= 1.05) return 'üü¢ B√åNH TH∆Ø·ªúNG: Magie trong gi·ªõi h·∫°n b√¨nh th∆∞·ªùng';
      if (value <= 1.25) return 'üü° TƒÇNG NH·∫∏: C·∫ßn theo d√µi ch·ª©c nƒÉng th·∫≠n';
      return 'üî¥ CAO: TƒÉng magie - C√≥ th·ªÉ do suy th·∫≠n ho·∫∑c d√πng thu·ªëc';
    }
  }

  String _analyzePhosphate(double value, String unitSymbol) {
    if (unitSymbol == 'mg/dL') {
      if (value < 2.5) return 'üî¥ TH·∫§P: H·∫° phosphat - C√≥ th·ªÉ do suy dinh d∆∞·ª°ng';
      if (value <= 4.5) return 'üü¢ B√åNH TH∆Ø·ªúNG: Phosphat trong gi·ªõi h·∫°n b√¨nh th∆∞·ªùng';
      if (value <= 6.0) return 'üü° TƒÇNG NH·∫∏: C·∫ßn ki·ªÉm tra ch·ª©c nƒÉng th·∫≠n';
      return 'üî¥ CAO: TƒÉng phosphat - Th∆∞·ªùng do suy th·∫≠n';
    } else { // mmol/L
      if (value < 0.81) return 'üî¥ TH·∫§P: H·∫° phosphat - C√≥ th·ªÉ do suy dinh d∆∞·ª°ng';
      if (value <= 1.45) return 'üü¢ B√åNH TH∆Ø·ªúNG: Phosphat trong gi·ªõi h·∫°n b√¨nh th∆∞·ªùng';
      if (value <= 1.94) return 'üü° TƒÇNG NH·∫∏: C·∫ßn ki·ªÉm tra ch·ª©c nƒÉng th·∫≠n';
      return 'üî¥ CAO: TƒÉng phosphat - Th∆∞·ªùng do suy th·∫≠n';
    }
  }

  String _analyzeBilirubin(double value, String unitSymbol) {
    if (unitSymbol == 'mg/dL') {
      if (value <= 1.2) return 'üü¢ B√åNH TH∆Ø·ªúNG: Bilirubin trong gi·ªõi h·∫°n b√¨nh th∆∞·ªùng';
      if (value <= 2.0) return 'üü° TƒÇNG NH·∫∏: C√≥ th·ªÉ c√≥ t√°n huy·∫øt nh·∫π ho·∫∑c Gilbert';
      if (value <= 5.0) return 'üî¥ TƒÇNG V·ª™NG: V√†ng da r√µ - C·∫ßn t√¨m nguy√™n nh√¢n';
      return 'üî¥ TƒÇNG CAO: V√†ng da n·∫∑ng - C·∫ßn ƒëi·ªÅu tr·ªã kh·∫©n c·∫•p';
    } else { // Œºmol/L
      if (value <= 21) return 'üü¢ B√åNH TH∆Ø·ªúNG: Bilirubin trong gi·ªõi h·∫°n b√¨nh th∆∞·ªùng';
      if (value <= 34) return 'üü° TƒÇNG NH·∫∏: C√≥ th·ªÉ c√≥ t√°n huy·∫øt nh·∫π ho·∫∑c Gilbert';
      if (value <= 85) return 'üî¥ TƒÇNG V·ª™NG: V√†ng da r√µ - C·∫ßn t√¨m nguy√™n nh√¢n';
      return 'üî¥ TƒÇNG CAO: V√†ng da n·∫∑ng - C·∫ßn ƒëi·ªÅu tr·ªã kh·∫©n c·∫•p';
    }
  }

  String _analyzeAlbumin(double value, String unitSymbol) {
    if (unitSymbol == 'g/dL') {
      if (value < 2.5) return 'üî¥ TH·∫§P N·∫∂NG: H·∫° albumin n·∫∑ng - Nguy c∆° ph√π, nhi·ªÖm tr√πng';
      if (value < 3.5) return 'üî¥ TH·∫§P: H·∫° albumin - C√≥ th·ªÉ do gan, th·∫≠n, dinh d∆∞·ª°ng';
      if (value <= 5.0) return 'üü¢ B√åNH TH∆Ø·ªúNG: Albumin trong gi·ªõi h·∫°n b√¨nh th∆∞·ªùng';
      return 'üü° CAO: Hi·∫øm g·∫∑p, c√≥ th·ªÉ do m·∫•t n∆∞·ªõc';
    } else { // g/L
      if (value < 25) return 'üî¥ TH·∫§P N·∫∂NG: H·∫° albumin n·∫∑ng - Nguy c∆° ph√π, nhi·ªÖm tr√πng';
      if (value < 35) return 'üî¥ TH·∫§P: H·∫° albumin - C√≥ th·ªÉ do gan, th·∫≠n, dinh d∆∞·ª°ng';
      if (value <= 50) return 'üü¢ B√åNH TH∆Ø·ªúNG: Albumin trong gi·ªõi h·∫°n b√¨nh th∆∞·ªùng';
      return 'üü° CAO: Hi·∫øm g·∫∑p, c√≥ th·ªÉ do m·∫•t n∆∞·ªõc';
    }
  }

  String _analyzeTotalProtein(double value, String unitSymbol) {
    if (unitSymbol == 'g/dL') {
      if (value < 6.0) return 'üî¥ TH·∫§P: H·∫° protein - C√≥ th·ªÉ do gan, th·∫≠n, suy dinh d∆∞·ª°ng';
      if (value <= 8.3) return 'üü¢ B√åNH TH∆Ø·ªúNG: Protein to√†n ph·∫ßn b√¨nh th∆∞·ªùng';
      if (value <= 9.5) return 'üü° TƒÇNG NH·∫∏: C√≥ th·ªÉ do m·∫•t n∆∞·ªõc ho·∫∑c vi√™m';
      return 'üî¥ CAO: TƒÉng protein - Nghi myeloma ho·∫∑c vi√™m m·∫°n';
    } else { // g/L
      if (value < 60) return 'üî¥ TH·∫§P: H·∫° protein - C√≥ th·ªÉ do gan, th·∫≠n, suy dinh d∆∞·ª°ng';
      if (value <= 83) return 'üü¢ B√åNH TH∆Ø·ªúNG: Protein to√†n ph·∫ßn b√¨nh th∆∞·ªùng';
      if (value <= 95) return 'üü° TƒÇNG NH·∫∏: C√≥ th·ªÉ do m·∫•t n∆∞·ªõc ho·∫∑c vi√™m';
      return 'üî¥ CAO: TƒÉng protein - Nghi myeloma ho·∫∑c vi√™m m·∫°n';
    }
  }

  String _analyzeAST(double value, String unitSymbol) {
    // AST normal: Men 15-40, Women 13-35 U/L
    if (value <= 40) return 'üü¢ B√åNH TH∆Ø·ªúNG: AST trong gi·ªõi h·∫°n b√¨nh th∆∞·ªùng';
    if (value <= 80) return 'üü° TƒÇNG NH·∫∏: C√≥ th·ªÉ do t·∫≠p th·ªÉ d·ª•c, thu·ªëc, ho·∫∑c gan nh·∫π';
    if (value <= 120) return 'üî¥ TƒÇNG V·ª™NG: T·ªïn th∆∞∆°ng gan/tim - C·∫ßn ƒë√°nh gi√° th√™m';
    return 'üî¥ TƒÇNG CAO: T·ªïn th∆∞∆°ng gan/tim nghi√™m tr·ªçng - C·∫ßn can thi·ªáp';
  }

  String _analyzeALT(double value, String unitSymbol) {
    // ALT normal: Men 10-40, Women 7-35 U/L
    if (value <= 40) return 'üü¢ B√åNH TH∆Ø·ªúNG: ALT trong gi·ªõi h·∫°n b√¨nh th∆∞·ªùng';
    if (value <= 80) return 'üü° TƒÇNG NH·∫∏: C√≥ th·ªÉ do b√©o ph√¨, thu·ªëc, ho·∫∑c vi√™m gan nh·∫π';
    if (value <= 120) return 'üî¥ TƒÇNG V·ª™NG: Vi√™m gan - C·∫ßn t√¨m nguy√™n nh√¢n';
    return 'üî¥ TƒÇNG CAO: Vi√™m gan nghi√™m tr·ªçng - C·∫ßn ƒëi·ªÅu tr·ªã kh·∫©n c·∫•p';
  }

  String _analyzeALP(double value, String unitSymbol) {
    // ALP normal: Adult 40-150, Children 100-320 U/L
    if (value <= 150) return 'üü¢ B√åNH TH∆Ø·ªúNG: ALP trong gi·ªõi h·∫°n b√¨nh th∆∞·ªùng';
    if (value <= 250) return 'üü° TƒÇNG NH·∫∏: C√≥ th·ªÉ do x∆∞∆°ng ph√°t tri·ªÉn ho·∫∑c gan nh·∫π';
    if (value <= 400) return 'üî¥ TƒÇNG V·ª™NG: B·ªánh x∆∞∆°ng ho·∫∑c t·∫Øc m·∫≠t - C·∫ßn ƒë√°nh gi√°';
    return 'üî¥ TƒÇNG CAO: B·ªánh x∆∞∆°ng n·∫∑ng ho·∫∑c t·∫Øc m·∫≠t nghi√™m tr·ªçng';
  }

  String _analyzeGGT(double value, String unitSymbol) {
    // GGT normal: Men 11-50, Women 7-32 U/L
    if (value <= 50) return 'üü¢ B√åNH TH∆Ø·ªúNG: GGT trong gi·ªõi h·∫°n b√¨nh th∆∞·ªùng';
    if (value <= 100) return 'üü° TƒÇNG NH·∫∏: C√≥ th·ªÉ do r∆∞·ª£u bia ho·∫∑c thu·ªëc';
    if (value <= 200) return 'üî¥ TƒÇNG V·ª™NG: Nghi t·ªïn th∆∞∆°ng gan do r∆∞·ª£u/thu·ªëc';
    return 'üî¥ TƒÇNG CAO: T·ªïn th∆∞∆°ng gan nghi√™m tr·ªçng - C·∫ßn can thi·ªáp';
  }

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is ConversionCategory &&
          runtimeType == other.runtimeType &&
          id == other.id;

  @override
  int get hashCode => id.hashCode;

  @override
  String toString() => name;
}
