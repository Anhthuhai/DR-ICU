import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import '../../../core/theme/app_theme.dart';

class SodiumCorrectionCalculatorPage extends StatefulWidget {
  const SodiumCorrectionCalculatorPage({super.key});

  @override
  State<SodiumCorrectionCalculatorPage> createState() => _SodiumCorrectionCalculatorPageState();
}

class _SodiumCorrectionCalculatorPageState extends State<SodiumCorrectionCalculatorPage> {
  final _weightController = TextEditingController();
  final _currentNaController = TextEditingController();
  final _targetNaController = TextEditingController();
  final _currentGlucoseController = TextEditingController();
  
  String _selectedGender = 'Nam';
  int _selectedAge = 40;
  bool _hasHyperglycemia = false;
  bool _isAcuteHyponatremia = false;
  
  double? _correctedNa;
  double? _totalBodyWater;
  double? _naDeficit;
  
  // K·∫øt qu·∫£ theo Adrogue-Madias
  double? _nacl09Volume;
  double? _nacl3Volume;
  
  // K·∫øt qu·∫£ theo ph∆∞∆°ng ph√°p Deficit (ƒë·ªÉ so s√°nh)
  double? _nacl09VolumeDeficit;
  double? _nacl3VolumeDeficit;
  
  double? _maxCorrectionRate;
  String _recommendation = '';

  @override
  void dispose() {
    _weightController.dispose();
    _currentNaController.dispose();
    _targetNaController.dispose();
    _currentGlucoseController.dispose();
    super.dispose();
  }

  void _calculateSodiumCorrection() {
    final weight = double.tryParse(_weightController.text);
    final currentNa = double.tryParse(_currentNaController.text);
    final targetNa = double.tryParse(_targetNaController.text);
    final currentGlucose = double.tryParse(_currentGlucoseController.text);

    if (weight == null || currentNa == null || targetNa == null) {
      _showErrorSnackBar('Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin b·∫Øt bu·ªôc');
      return;
    }

    if (currentNa >= 135) {
      _showErrorSnackBar('Kh√¥ng c√≥ h·∫° natri m√°u (Na+ ‚â• 135 mmol/L)');
      return;
    }

    if (targetNa > 145) {
      _showErrorSnackBar('M·ª•c ti√™u Na+ kh√¥ng n√™n > 145 mmol/L');
      return;
    }

    setState(() {
      // T√≠nh to√°n Total Body Water (TBW)
      double tbwFactor;
      if (_selectedGender == 'Nam') {
        tbwFactor = _selectedAge > 60 ? 0.5 : 0.6;
      } else {
        tbwFactor = _selectedAge > 60 ? 0.45 : 0.5;
      }
      _totalBodyWater = weight * tbwFactor;

      // Hi·ªáu ch·ªânh Na+ n·∫øu c√≥ tƒÉng glucose m√°u
      double correctedCurrentNa = currentNa;
      if (_hasHyperglycemia && currentGlucose != null && currentGlucose > 100) {
        // C√¥ng th·ª©c Katz: M·ªói 100mg/dL tƒÉng glucose ‚Üí Na+ gi·∫£m 1.6 mmol/L
        correctedCurrentNa = currentNa + (currentGlucose - 100) / 100 * 1.6;
      }
      _correctedNa = correctedCurrentNa;

      double desiredChange = targetNa - correctedCurrentNa;

      // T√≠nh to√°n theo PH∆Ø∆†NG PH√ÅP DEFICIT (ƒë·ªÉ so s√°nh)
      _naDeficit = desiredChange * _totalBodyWater!;
      _nacl09VolumeDeficit = _naDeficit! / 154 * 1000; // mL
      _nacl3VolumeDeficit = _naDeficit! / 513 * 1000; // mL
      
      // T√≠nh to√°n theo c√¥ng th·ª©c ADROGUE-MADIAS (ch√≠nh th·ªëng)
      // Œî Na+ = (Na+ infusion - Na+ serum) / (TBW + 1)
      
      // T√≠nh thay ƒë·ªïi Na+ v·ªõi 1L NaCl 0.9% (154 mmol/L)
      double deltaNa09 = (154 - correctedCurrentNa) / (_totalBodyWater! + 1);
      _nacl09Volume = (desiredChange / deltaNa09) * 1000; // mL
      
      // T√≠nh thay ƒë·ªïi Na+ v·ªõi 1L NaCl 3% (513 mmol/L)
      double deltaNa3 = (513 - correctedCurrentNa) / (_totalBodyWater! + 1);
      _nacl3Volume = (desiredChange / deltaNa3) * 1000; // mL

      // T·ªëc ƒë·ªô hi·ªáu ch·ªânh t·ªëi ƒëa theo ESH/ESC 2018
      if (_isAcuteHyponatremia) {
        _maxCorrectionRate = 10.0; // <10 mmol/L/24h cho h·∫° natri c·∫•p
      } else {
        if (correctedCurrentNa < 120) {
          _maxCorrectionRate = 10.0; // <10 mmol/L/24h cho Na+ <120
        } else {
          _maxCorrectionRate = 8.0; // <8 mmol/L/24h cho Na+ 120-129
        }
      }

      _generateRecommendation();
    });
  }

  void _generateRecommendation() {
    String severity = '';
    String urgency = '';
    String fluid = '';
    
    if (_correctedNa! < 120) {
      severity = 'H·∫° natri m√°u n·∫∑ng';
      urgency = 'C·∫§P C·ª®U';
      fluid = 'NaCl 3%';
    } else if (_correctedNa! < 130) {
      severity = 'H·∫° natri m√°u v·ª´a';
      urgency = 'C·∫ßn ƒëi·ªÅu tr·ªã';
      fluid = 'NaCl 0.9% ho·∫∑c 3%';
    } else {
      severity = 'H·∫° natri m√°u nh·∫π';
      urgency = 'Theo d√µi';
      fluid = 'NaCl 0.9%';
    }

    double percentDifference = ((_nacl3Volume! - _nacl3VolumeDeficit!) / _nacl3VolumeDeficit! * 100).abs();

    _recommendation = '''
üìä ƒê√ÅNH GI√Å: $severity ($urgency)

üéØ M·ª§C TI√äU ƒêI·ªÄU TR·ªä (ESH/ESC 2018):
‚Ä¢ TƒÉng Na+ t·ª´ ${_correctedNa!.toStringAsFixed(1)} ‚Üí ${_targetNaController.text} mmol/L
‚Ä¢ T·ªëc ƒë·ªô an to√†n: <${_maxCorrectionRate!.toStringAsFixed(1)} mmol/L/24h
${_isAcuteHyponatremia ? '‚Ä¢ C√≥ tri·ªáu ch·ª©ng: 1-2 mmol/L/h x 3-4h ƒë·∫ßu' : ''}

ÔøΩ SO S√ÅNH HAI PH∆Ø∆†NG PH√ÅP:
‚Ä¢ Adrogue-Madias (NaCl 3%): ${_nacl3Volume!.toStringAsFixed(0)} mL
‚Ä¢ Deficit Formula (NaCl 3%): ${_nacl3VolumeDeficit!.toStringAsFixed(0)} mL
‚Ä¢ Ch√™nh l·ªách: ${(_nacl3Volume! - _nacl3VolumeDeficit!).toStringAsFixed(0)} mL (${percentDifference.toStringAsFixed(1)}%)

ÔøΩüíß CH·ªåN DUNG D·ªäCH:
‚Ä¢ $fluid ƒë∆∞·ª£c khuy·∫øn ngh·ªã
${_correctedNa! < 120 ? '‚Ä¢ NaCl 3% ∆∞u ti√™n v√¨ h·∫° natri n·∫∑ng' : ''}

üö® C·∫¢NH B√ÅO QUAN TR·ªåNG - Na+ TH·∫§P GI·∫¢:
‚Ä¢ M·ªôt s·ªë c∆° s·ªü XN c√≥ th·ªÉ tr·∫£ k·∫øt qu·∫£ Na+ th·∫•p gi·∫£
‚Ä¢ Nguy√™n nh√¢n: Hyperproteinemia, hyperlipidemia
‚Ä¢ NGUY C∆†: B√π theo Adrogue-Madias c√≥ th·ªÉ QU√Å M·ª®C
‚Ä¢ KHUY·∫æN NGH·ªä: 
  ‚úì Ki·ªÉm tra l·∫°i k·∫øt qu·∫£ Na+ tr√™n m√°y ISE tr·ª±c ti·∫øp
  ‚úì B·∫Øt ƒë·∫ßu v·ªõi 50-70% th·ªÉ t√≠ch Adrogue-Madias
  ‚úì Theo d√µi Na+ m·ªói 2h trong giai ƒëo·∫°n ƒë·∫ßu

‚ö†Ô∏è NGUY C∆† OSMOTIC DEMYELINATION:
‚Ä¢ Nguy c∆° cao: Nghi·ªán r∆∞·ª£u, suy dinh d∆∞·ª°ng, b·ªánh gan
‚Ä¢ TUY·ªÜT ƒê·ªêI tr√°nh hi·ªáu ch·ªânh >18 mmol/L trong 48h
‚Ä¢ Ng∆∞ng ƒëi·ªÅu tr·ªã khi ƒë·∫°t m·ª•c ti√™u ho·∫∑c tri·ªáu ch·ª©ng c·∫£i thi·ªán

üî¨ THEO D√ïI NGHI√äM NG·∫∂T:
‚Ä¢ Na+ m√°u m·ªói 2-4h trong 24h ƒë·∫ßu (m·ªói 1-2h n·∫øu nghi ng·ªù Na+ th·∫•p gi·∫£)
‚Ä¢ Tri·ªáu ch·ª©ng th·∫ßn kinh (√Ω th·ª©c, ƒë·ªông kinh)
‚Ä¢ C√¢n b·∫±ng n∆∞·ªõc - ƒëi·ªán gi·∫£i (K+, Mg2+)
‚Ä¢ Protein, lipid m√°u n·∫øu nghi ng·ªù Na+ th·∫•p gi·∫£

ÔøΩ PH∆Ø∆†NG PH√ÅP AN TO√ÄN:
‚Ä¢ B·∫Øt ƒë·∫ßu v·ªõi Deficit Formula n·∫øu nghi ng·ªù Na+ th·∫•p gi·∫£
‚Ä¢ Chuy·ªÉn sang Adrogue-Madias khi x√°c nh·∫≠n Na+ th·∫≠t
‚Ä¢ B√π K+ n·∫øu c√≥ hypokalemia
‚Ä¢ Furosemide n·∫øu nguy c∆° qu√° t·∫£i d·ªãch''';
  }

  void _showErrorSnackBar(String message) {
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Text(message),
        backgroundColor: Colors.red,
        duration: const Duration(seconds: 3),
      ),
    );
  }

  Widget _buildInputCard() {
    return Card(
      elevation: 4,
      child: Padding(
        padding: const EdgeInsets.all(16),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            const Text(
              'Th√¥ng tin b·ªánh nh√¢n',
              style: TextStyle(
                fontSize: 18,
                fontWeight: FontWeight.bold,
                color: AppTheme.primaryBlue,
              ),
            ),
            const SizedBox(height: 16),
            
            // C√¢n n·∫∑ng
            TextField(
              controller: _weightController,
              keyboardType: TextInputType.number,
              inputFormatters: [FilteringTextInputFormatter.allow(RegExp(r'[0-9.]'))],
              decoration: const InputDecoration(
                labelText: 'C√¢n n·∫∑ng (kg) *',
                border: OutlineInputBorder(),
                suffixText: 'kg',
              ),
            ),
            const SizedBox(height: 16),
            
            // Gi·ªõi t√≠nh v√† tu·ªïi
            Row(
              children: [
                Expanded(
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      const Text('Gi·ªõi t√≠nh'),
                      const SizedBox(height: 8),
                      DropdownButtonFormField<String>(
                        initialValue: _selectedGender,
                        decoration: const InputDecoration(
                          border: OutlineInputBorder(),
                        ),
                        items: ['Nam', 'N·ªØ'].map((gender) {
                          return DropdownMenuItem(
                            value: gender,
                            child: Text(gender),
                          );
                        }).toList(),
                        onChanged: (value) {
                          setState(() {
                            _selectedGender = value!;
                          });
                        },
                      ),
                    ],
                  ),
                ),
                const SizedBox(width: 16),
                Expanded(
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      const Text('Tu·ªïi'),
                      const SizedBox(height: 8),
                      DropdownButtonFormField<int>(
                        initialValue: _selectedAge,
                        decoration: const InputDecoration(
                          border: OutlineInputBorder(),
                        ),
                        items: List.generate(80, (index) => 20 + index).map((age) {
                          return DropdownMenuItem(
                            value: age,
                            child: Text('$age tu·ªïi'),
                          );
                        }).toList(),
                        onChanged: (value) {
                          setState(() {
                            _selectedAge = value!;
                          });
                        },
                      ),
                    ],
                  ),
                ),
              ],
            ),
            const SizedBox(height: 16),
            
            // Na+ hi·ªán t·∫°i
            TextField(
              controller: _currentNaController,
              keyboardType: TextInputType.number,
              inputFormatters: [FilteringTextInputFormatter.allow(RegExp(r'[0-9.]'))],
              decoration: const InputDecoration(
                labelText: 'Na+ hi·ªán t·∫°i (mmol/L) *',
                border: OutlineInputBorder(),
                suffixText: 'mmol/L',
                helperText: 'B√¨nh th∆∞·ªùng: 135-145 mmol/L',
              ),
            ),
            const SizedBox(height: 16),
            
            // Na+ m·ª•c ti√™u
            TextField(
              controller: _targetNaController,
              keyboardType: TextInputType.number,
              inputFormatters: [FilteringTextInputFormatter.allow(RegExp(r'[0-9.]'))],
              decoration: const InputDecoration(
                labelText: 'Na+ m·ª•c ti√™u (mmol/L) *',
                border: OutlineInputBorder(),
                suffixText: 'mmol/L',
                helperText: 'Kh√¥ng n√™n > 145 mmol/L',
              ),
            ),
            const SizedBox(height: 16),
            
            // TƒÉng glucose m√°u
            CheckboxListTile(
              title: const Text('C√≥ tƒÉng glucose m√°u'),
              value: _hasHyperglycemia,
              onChanged: (value) {
                setState(() {
                  _hasHyperglycemia = value!;
                });
              },
            ),
            
            if (_hasHyperglycemia) ...[
              const SizedBox(height: 8),
              TextField(
                controller: _currentGlucoseController,
                keyboardType: TextInputType.number,
                inputFormatters: [FilteringTextInputFormatter.allow(RegExp(r'[0-9.]'))],
                decoration: const InputDecoration(
                  labelText: 'Glucose m√°u hi·ªán t·∫°i (mg/dL)',
                  border: OutlineInputBorder(),
                  suffixText: 'mg/dL',
                ),
              ),
            ],
            
            const SizedBox(height: 16),
            
            // Th·ªùi gian kh·ªüi ph√°t
            CheckboxListTile(
              title: const Text('H·∫° natri c·∫•p t√≠nh (<48h)'),
              value: _isAcuteHyponatremia,
              onChanged: (value) {
                setState(() {
                  _isAcuteHyponatremia = value!;
                });
              },
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildResultCard() {
    if (_totalBodyWater == null) return const SizedBox.shrink();

    return Card(
      elevation: 4,
      child: Padding(
        padding: const EdgeInsets.all(16),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            const Text(
              'K·∫øt qu·∫£ t√≠nh to√°n',
              style: TextStyle(
                fontSize: 18,
                fontWeight: FontWeight.bold,
                color: AppTheme.primaryBlue,
              ),
            ),
            const SizedBox(height: 16),
            
            _buildResultRow('Total Body Water (TBW)', '${_totalBodyWater!.toStringAsFixed(1)} L'),
            
            if (_hasHyperglycemia && _correctedNa != null)
              _buildResultRow('Na+ hi·ªáu ch·ªânh theo glucose', '${_correctedNa!.toStringAsFixed(1)} mmol/L'),
            
            _buildResultRow('Na+ deficit', '${_naDeficit!.toStringAsFixed(1)} mmol'),
            
            const Divider(),
            Row(
              children: [
                const Icon(Icons.science, color: AppTheme.primaryBlue, size: 20),
                const SizedBox(width: 8),
                const Text(
                  'Ph∆∞∆°ng ph√°p Adrogue-Madias (Khuy·∫øn ngh·ªã):',
                  style: TextStyle(fontWeight: FontWeight.bold, color: AppTheme.primaryBlue),
                ),
              ],
            ),
            const SizedBox(height: 8),
            
            _buildResultRow('NaCl 0.9% (Œî Na+ = ${((154 - _correctedNa!) / (_totalBodyWater! + 1)).toStringAsFixed(1)} mmol/L/L)', '${_nacl09Volume!.toStringAsFixed(0)} mL'),
            _buildResultRow('NaCl 3% (Œî Na+ = ${((513 - _correctedNa!) / (_totalBodyWater! + 1)).toStringAsFixed(1)} mmol/L/L)', '${_nacl3Volume!.toStringAsFixed(0)} mL'),
            
            const SizedBox(height: 12),
            
            const Divider(),
            Row(
              children: [
                const Icon(Icons.compare_arrows, color: Colors.orange, size: 20),
                const SizedBox(width: 8),
                const Text(
                  'Ph∆∞∆°ng ph√°p Deficit (So s√°nh):',
                  style: TextStyle(fontWeight: FontWeight.bold, color: Colors.orange),
                ),
              ],
            ),
            const SizedBox(height: 8),
            
            _buildResultRow('NaCl 0.9% (Deficit formula)', '${_nacl09VolumeDeficit!.toStringAsFixed(0)} mL'),
            _buildResultRow('NaCl 3% (Deficit formula)', '${_nacl3VolumeDeficit!.toStringAsFixed(0)} mL'),
            
            const SizedBox(height: 8),
            Container(
              padding: const EdgeInsets.all(10),
              decoration: BoxDecoration(
                color: Colors.amber.shade50,
                borderRadius: BorderRadius.circular(8),
                border: Border.all(color: Colors.amber.shade300),
              ),
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  Row(
                    children: [
                      const Icon(Icons.warning_amber, color: Colors.orange, size: 16),
                      const SizedBox(width: 6),
                      const Text(
                        'CH√äNH L·ªÜCH QUAN TR·ªåNG:',
                        style: TextStyle(fontWeight: FontWeight.bold, fontSize: 12),
                      ),
                    ],
                  ),
                  const SizedBox(height: 6),
                  Text(
                    'NaCl 0.9%: ${(_nacl09Volume! - _nacl09VolumeDeficit!).toStringAsFixed(0)} mL kh√°c bi·ªát\n'
                    'NaCl 3%: ${(_nacl3Volume! - _nacl3VolumeDeficit!).toStringAsFixed(0)} mL kh√°c bi·ªát\n\n'
                    'Adrogue-Madias th∆∞·ªùng cho k·∫øt qu·∫£ cao h∆°n do t√≠nh ƒë·∫øn pha lo√£ng.',
                    style: TextStyle(fontSize: 11, color: Colors.amber.shade800),
                  ),
                ],
              ),
            ),
            
            const SizedBox(height: 8),
            Container(
              padding: const EdgeInsets.all(8),
              decoration: BoxDecoration(
                color: Colors.blue.shade50,
                borderRadius: BorderRadius.circular(6),
                border: Border.all(color: Colors.blue.shade200),
              ),
              child: Text(
                'Adrogue-Madias: Œî Na+ = (Na+ dung d·ªãch - Na+ huy·∫øt thanh) / (TBW + 1L)\n'
                'Deficit: Th·ªÉ t√≠ch = Na+ deficit / n·ªìng ƒë·ªô Na+ √ó 1000 mL',
                style: TextStyle(fontSize: 12, color: Colors.blue.shade700),
              ),
            ),
            
            const Divider(),
            _buildResultRow('T·ªëc ƒë·ªô hi·ªáu ch·ªânh t·ªëi ƒëa', '${_maxCorrectionRate!.toStringAsFixed(1)} mmol/L/24h'),
          ],
        ),
      ),
    );
  }

  Widget _buildResultRow(String label, String value) {
    return Padding(
      padding: const EdgeInsets.symmetric(vertical: 4),
      child: Row(
        mainAxisAlignment: MainAxisAlignment.spaceBetween,
        children: [
          Expanded(
            flex: 2,
            child: Text(label),
          ),
          Expanded(
            flex: 1,
            child: Text(
              value,
              style: const TextStyle(
                fontWeight: FontWeight.bold,
                color: AppTheme.primaryBlue,
              ),
              textAlign: TextAlign.right,
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildRecommendationCard() {
    if (_recommendation.isEmpty) return const SizedBox.shrink();

    return Card(
      elevation: 4,
      child: Padding(
        padding: const EdgeInsets.all(16),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            const Text(
              'Khuy·∫øn ngh·ªã ƒëi·ªÅu tr·ªã',
              style: TextStyle(
                fontSize: 18,
                fontWeight: FontWeight.bold,
                color: AppTheme.primaryBlue,
              ),
            ),
            const SizedBox(height: 16),
            Container(
              padding: const EdgeInsets.all(12),
              decoration: BoxDecoration(
                color: Colors.orange.shade50,
                borderRadius: BorderRadius.circular(8),
                border: Border.all(color: Colors.orange.shade200),
              ),
              child: Text(
                _recommendation,
                style: const TextStyle(fontSize: 14, height: 1.5),
              ),
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildFormulaCard() {
    return Card(
      elevation: 4,
      child: Padding(
        padding: const EdgeInsets.all(16),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            const Text(
              'C√¥ng th·ª©c t√≠nh to√°n',
              style: TextStyle(
                fontSize: 18,
                fontWeight: FontWeight.bold,
                color: AppTheme.primaryBlue,
              ),
            ),
            const SizedBox(height: 16),
            _buildFormulaSection(
              'Total Body Water (TBW)',
              'Nam > 60 tu·ªïi: C√¢n n·∫∑ng √ó 0.5\n'
              'Nam ‚â§ 60 tu·ªïi: C√¢n n·∫∑ng √ó 0.6\n'
              'N·ªØ > 60 tu·ªïi: C√¢n n·∫∑ng √ó 0.45\n'
              'N·ªØ ‚â§ 60 tu·ªïi: C√¢n n·∫∑ng √ó 0.5\n\n'
              'üìñ Tham kh·∫£o: Watson PE, Watson ID, Batt RD, 1980',
            ),
            _buildFormulaSection(
              'Hi·ªáu ch·ªânh Na+ theo glucose',
              'Na+ hi·ªáu ch·ªânh = Na+ ƒëo + (Glucose - 100) / 100 √ó 1.6\n\n'
              '‚ö†Ô∏è Ch·ªâ √°p d·ª•ng khi glucose > 100 mg/dL\n'
              'C√¥ng th·ª©c Katz & Ma (1999): M·ªói 100 mg/dL tƒÉng glucose\n'
              '‚Üí Na+ gi·∫£m gi·∫£ t·∫°o 1.6 mmol/L\n\n'
              'üìñ Tham kh·∫£o: Katz MA, 1973; Hillier et al., 1999',
            ),
            _buildFormulaSection(
              'C√¥ng th·ª©c Adrogue-Madias (CH√çNH TH·ªêNG)',
              'Œî Na+ = (Na+ dung d·ªãch - Na+ huy·∫øt thanh) / (TBW + 1)\n\n'
              'V√ç D·ª§:\n'
              '‚Ä¢ Na+ huy·∫øt thanh = 120 mmol/L, TBW = 40L\n'
              '‚Ä¢ NaCl 3% (513 mmol/L): Œî = (513-120)/(40+1) = 9.6 mmol/L\n'
              '‚Ä¢ NaCl 0.9% (154 mmol/L): Œî = (154-120)/(40+1) = 0.8 mmol/L\n\n'
              'Th·ªÉ t√≠ch c·∫ßn = TƒÉng mong mu·ªën / Œî Na+ √ó 1000 mL\n\n'
              '‚ö†Ô∏è L∆ØU √ù: C√¥ng th·ª©c n√†y t√≠nh ch√≠nh x√°c h∆°n v√¨:\n'
              '‚Ä¢ T√≠nh ƒë·∫øn s·ª± pha lo√£ng c·ªßa dung d·ªãch infusion\n'
              '‚Ä¢ T√≠nh ƒë·∫øn th·ªÉ t√≠ch dung d·ªãch th√™m v√†o\n'
              '‚Ä¢ Ph√π h·ª£p v·ªõi th·ª±c t·∫ø l√¢m s√†ng\n\n'
              'üìñ Tham kh·∫£o: Adrogue & Madias, NEJM 2000',
            ),
            _buildFormulaSection(
              'So s√°nh: Deficit vs Adrogue-Madias',
              'C√îNG TH·ª®C DEFICIT (KH√îNG CH√çNH X√ÅC):\n'
              '‚Ä¢ Na+ deficit = (M·ª•c ti√™u - Hi·ªán t·∫°i) √ó TBW\n'
              '‚Ä¢ Th·ªÉ t√≠ch = Deficit / N·ªìng ƒë·ªô √ó 1000\n'
              '‚Ä¢ SAI L·∫¶M: Kh√¥ng t√≠nh pha lo√£ng\n\n'
              'C√îNG TH·ª®C ADROGUE-MADIAS (CH√çNH X√ÅC):\n'
              '‚Ä¢ Œî Na+ = (Na+ dung d·ªãch - Na+ m√°u) / (TBW + 1)\n'
              '‚Ä¢ Th·ªÉ t√≠ch = TƒÉng mong mu·ªën / Œî Na+ √ó 1000\n'
              '‚Ä¢ ƒê√öNG: T√≠nh c·∫£ pha lo√£ng do dung d·ªãch\n\n'
              'K·∫æT QU·∫¢: Adrogue-Madias cho th·ªÉ t√≠ch CH√çNH X√ÅC h∆°n!',
            ),
            _buildFormulaSection(
              'Th·ªÉ t√≠ch dung d·ªãch',
              'NaCl 0.9% (Normal Saline): 154 mmol Na+/L\n'
              'NaCl 3% (Hypertonic Saline): 513 mmol Na+/L\n\n'
              'Th·ªÉ t√≠ch = Na+ deficit / n·ªìng ƒë·ªô Na+ √ó 1000 (mL)\n\n'
              'üìñ Tham kh·∫£o: Composition of IV fluids, USP',
            ),
            _buildFormulaSection(
              'T·ªëc ƒë·ªô hi·ªáu ch·ªânh an to√†n (ESH/ESC 2018)',
              'H·∫° natri c·∫•p (<48h):\n'
              '‚Ä¢ C√≥ tri·ªáu ch·ª©ng: 1-2 mmol/L/h x 3-4h ƒë·∫ßu\n'
              '‚Ä¢ Sau ƒë√≥: <10 mmol/L/24h, <18 mmol/L/48h\n\n'
              'H·∫° natri m·∫°n (>48h):\n'
              '‚Ä¢ Na+ <120 mmol/L: <10 mmol/L/24h\n'
              '‚Ä¢ Na+ 120-129 mmol/L: <8 mmol/L/24h\n\n'
              '‚ö†Ô∏è NGUY C∆†: Osmotic Demyelination Syndrome\n'
              'Y·∫øu t·ªë nguy c∆° cao: Nghi·ªán r∆∞·ª£u, suy dinh d∆∞·ª°ng,\n'
              'b·ªánh gan, hypokalemia\n\n'
              'üìñ Tham kh·∫£o: ESH/ESC Guidelines 2018; Spasovski et al., 2014',
            ),
            _buildFormulaSection(
              'C·∫¢NH B√ÅO: Na+ th·∫•p gi·∫£ (Pseudohyponatremia)',
              'NGUY√äN NH√ÇN Na+ th·∫•p gi·∫£:\n'
              '‚Ä¢ Hyperproteinemia (protein >100 g/L)\n'
              '‚Ä¢ Hyperlipidemia (triglyceride >15 mmol/L)\n'
              '‚Ä¢ Hyperglycemia nghi√™m tr·ªçng (>55 mmol/L)\n\n'
              'PH∆Ø∆†NG PH√ÅP PH√ÅT HI·ªÜN:\n'
              '‚Ä¢ ƒêo Na+ b·∫±ng ISE tr·ª±c ti·∫øp (Direct ISE)\n'
              '‚Ä¢ T√≠nh osmolality: 2√ó(Na+ + K+) + glucose + urea\n'
              '‚Ä¢ So s√°nh v·ªõi osmolality ƒëo tr·ª±c ti·∫øp\n\n'
              'CHI·∫æN L∆Ø·ª¢C AN TO√ÄN:\n'
              '‚Ä¢ Nghi ng·ªù n·∫øu: Protein cao, lipid cao, ƒë√°i th√°o ƒë∆∞·ªùng\n'
              '‚Ä¢ B·∫Øt ƒë·∫ßu v·ªõi 50-70% th·ªÉ t√≠ch Adrogue-Madias\n'
              '‚Ä¢ Theo d√µi Na+ m·ªói 1-2h trong giai ƒëo·∫°n ƒë·∫ßu\n'
              '‚Ä¢ Ki·ªÉm tra l·∫°i b·∫±ng m√°y ISE tr·ª±c ti·∫øp\n\n'
              'üö® NGUY C∆†: B√π qu√° m·ª©c ‚Üí Hypernatremia ‚Üí ODS\n\n'
              'üìñ Tham kh·∫£o: Dimeski G, Clin Biochem 2012',
            ),
            _buildReferencesSection(),
          ],
        ),
      ),
    );
  }

  Widget _buildFormulaSection(String title, String content) {
    return Padding(
      padding: const EdgeInsets.only(bottom: 16),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Text(
            title,
            style: const TextStyle(
              fontWeight: FontWeight.bold,
              fontSize: 16,
            ),
          ),
          const SizedBox(height: 8),
          Container(
            padding: const EdgeInsets.all(12),
            decoration: BoxDecoration(
              color: Colors.blue.shade50,
              borderRadius: BorderRadius.circular(8),
              border: Border.all(color: Colors.blue.shade200),
            ),
            child: Text(
              content,
              style: const TextStyle(fontSize: 14),
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildReferencesSection() {
    return Card(
      elevation: 4,
      child: Padding(
        padding: const EdgeInsets.all(16),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            const Text(
              'T√†i li·ªáu tham kh·∫£o',
              style: TextStyle(
                fontSize: 18,
                fontWeight: FontWeight.bold,
                color: AppTheme.primaryBlue,
              ),
            ),
            const SizedBox(height: 16),
            Container(
              padding: const EdgeInsets.all(12),
              decoration: BoxDecoration(
                color: Colors.grey.shade50,
                borderRadius: BorderRadius.circular(8),
                border: Border.all(color: Colors.grey.shade300),
              ),
              child: const Text(
                '1. Adrogue HJ, Madias NE. Hyponatremia. N Engl J Med. 2000;342(21):1581-1589.\n\n'
                '2. Spasovski G, Vanholder R, Allolio B, et al. Clinical practice guideline on diagnosis and treatment of hyponatraemia. Eur J Endocrinol. 2014;170(3):G1-47.\n\n'
                '3. Katz MA. Hyperglycemia-induced hyponatremia--calculation of expected serum sodium depression. N Engl J Med. 1973;289(16):843-844.\n\n'
                '4. Hillier TA, Abbott RD, Barrett EJ. Hyponatremia: evaluating the correction factor for hyperglycemia. Am J Med. 1999;106(4):399-403.\n\n'
                '5. Watson PE, Watson ID, Batt RD. Total body water volumes for adult males and females estimated from simple anthropometric measurements. Am J Clin Nutr. 1980;33(1):27-39.\n\n'
                '6. ESH/ESC Guidelines for the management of arterial hypertension. Eur Heart J. 2018;39(33):3021-3104.\n\n'
                '7. Verbalis JG, Goldsmith SR, Greenberg A, et al. Diagnosis, evaluation, and treatment of hyponatremia: expert panel recommendations. Am J Med. 2013;126(10 Suppl 1):S1-42.\n\n'
                '8. Sterns RH, Hix JK, Silver S. Management of hyponatremia in the ICU. Chest. 2013;144(2):672-679.',
                style: TextStyle(fontSize: 12, height: 1.4),
              ),
            ),
            const SizedBox(height: 12),
            Container(
              padding: const EdgeInsets.all(12),
              decoration: BoxDecoration(
                color: Colors.amber.shade50,
                borderRadius: BorderRadius.circular(8),
                border: Border.all(color: Colors.amber.shade300),
              ),
              child: const Row(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  Icon(
                    Icons.warning_amber,
                    color: Colors.orange,
                    size: 20,
                  ),
                  SizedBox(width: 8),
                  Expanded(
                    child: Text(
                      'L∆ØU √ù QUAN TR·ªåNG:\n'
                      '‚Ä¢ C√¥ng th·ª©c ch·ªâ l√† ∆∞·ªõc t√≠nh ban ƒë·∫ßu\n'
                      '‚Ä¢ C·∫ßn theo d√µi Na+ m·ªói 2-4h v√† ƒëi·ªÅu ch·ªânh\n'
                      '‚Ä¢ Nguy c∆° Osmotic Demyelination n·∫øu hi·ªáu ch·ªânh qu√° nhanh\n'
                      '‚Ä¢ Lu√¥n tu√¢n th·ªß h∆∞·ªõng d·∫´n l√¢m s√†ng ƒë·ªãa ph∆∞∆°ng',
                      style: TextStyle(fontSize: 12, height: 1.4),
                    ),
                  ),
                ],
              ),
            ),
          ],
        ),
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: Colors.grey[50],
      appBar: AppBar(
        title: const Text('T√≠nh b√π Natri m√°u'),
        backgroundColor: AppTheme.primaryBlue,
        foregroundColor: Colors.white,
        elevation: 0,
      ),
      body: SingleChildScrollView(
        padding: const EdgeInsets.all(16),
        child: Column(
          children: [
            _buildInputCard(),
            const SizedBox(height: 16),
            SizedBox(
              width: double.infinity,
              child: ElevatedButton(
                onPressed: _calculateSodiumCorrection,
                style: ElevatedButton.styleFrom(
                  backgroundColor: AppTheme.primaryBlue,
                  foregroundColor: Colors.white,
                  padding: const EdgeInsets.symmetric(vertical: 16),
                ),
                child: const Text(
                  'T√≠nh to√°n b√π Natri',
                  style: TextStyle(fontSize: 16, fontWeight: FontWeight.bold),
                ),
              ),
            ),
            const SizedBox(height: 16),
            _buildResultCard(),
            const SizedBox(height: 16),
            _buildRecommendationCard(),
            const SizedBox(height: 16),
            _buildFormulaCard(),
            const SizedBox(height: 16),
            _buildReferencesSection(),
          ],
        ),
      ),
    );
  }
}
